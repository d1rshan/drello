import {
  integer,
  pgTable,
  varchar,
  uuid,
  index,
  uniqueIndex,
  pgEnum,
  timestamp,
  text,
  boolean,
} from "drizzle-orm/pg-core";

// export const usersTable = pgTable("users", {
//   id: uuid("id").primaryKey().defaultRandom(),
//   firstName: varchar("first_name", { length: 255 }).notNull(),
//   lastName: varchar("last_name", { length: 255 }).notNull(),
//   email: varchar({ length: 255 }).notNull().unique(),
// });

// GENERATED BY BETTER AUTH

// -------------------------------------------------------------

export const user = pgTable("user", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  emailVerified: boolean("email_verified")
    .$defaultFn(() => false)
    .notNull(),
  image: text("image"),
  createdAt: timestamp("created_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
  updatedAt: timestamp("updated_at")
    .$defaultFn(() => /* @__PURE__ */ new Date())
    .notNull(),
});

export const session = pgTable("session", {
  id: text("id").primaryKey(),
  expiresAt: timestamp("expires_at").notNull(),
  token: text("token").notNull().unique(),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
});

export const account = pgTable("account", {
  id: text("id").primaryKey(),
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: timestamp("access_token_expires_at"),
  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),
  scope: text("scope"),
  password: text("password"),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
});

export const verification = pgTable("verification", {
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at").$defaultFn(
    () => /* @__PURE__ */ new Date()
  ),
  updatedAt: timestamp("updated_at").$defaultFn(
    () => /* @__PURE__ */ new Date()
  ),
});

// -------------------------------------------------------------

export const boardsTable = pgTable("boards", {
  id: uuid("id").primaryKey().defaultRandom(),
  title: varchar("title", { length: 255 }).notNull(),
});

// one to many relation - boards to lists
export const listsTable = pgTable(
  "lists",
  {
    id: uuid("id").primaryKey().defaultRandom(),
    title: varchar("title", { length: 255 }).notNull(),
    position: integer("position").notNull(),
    boardId: uuid("board_id").references(() => boardsTable.id, {
      onDelete: "cascade",
    }),
  },
  (t) => [index("board_id_index").on(t.boardId)] // we are not using uniqueIndex cause many lists can have the same boardId
);

// one to many relation - lists to cards
export const cardsTable = pgTable(
  "cards",
  {
    id: uuid("id").primaryKey().defaultRandom(),
    title: varchar("title", { length: 255 }).notNull(),
    position: integer("position").notNull(),
    listId: uuid("list_id").references(() => listsTable.id, {
      onDelete: "cascade",
    }),
  },
  (t) => [index("list_id_index").on(t.listId)]
);

export const rolesEnum = pgEnum("roles", ["GUEST", "ADMIN"]);

// many to many relation - users & boards
export const boardMembersTable = pgTable(
  "board_members",
  {
    id: uuid("id").primaryKey().defaultRandom(),
    userId: text("user_id").references(() => user.id, {
      onDelete: "cascade",
    }),
    boardId: uuid("board_id").references(() => boardsTable.id, {
      onDelete: "cascade",
    }),
    role: rolesEnum().default("GUEST"),
  },
  (t) => [uniqueIndex("user_id_board_id_index").on(t.userId, t.boardId)]
);
